#!/bin/bash

# Runs a given MULTOVL variant with big input files
# Can be used for timing or to detect 'random' crashes in multithreaded versions
# 2012-04-16 AA

# -- Directories --

PGMS=@PROJECT_BINARY_DIR@/bin
TEST=${PGMS}/exercise
DATA=${TEST}/running

# -- Default values for script parameters --

REPEAT=1
CHROM=20
DELTA=10
GROUPCNT=1000
TRACKNO=8

# -- Functions --

print_usage()
{
    cat <<HERE 
Script to run a MULTOVL variant with big input files
Usage: `basename $0` [script-options] program [program-options]
Script options:
    -r <repeat>: Number of repeated runs, default ${REPEAT}
    -c <chrom>: number of chromosomes in input files, default ${CHROM}
    -d <delta>: relative shift of regions, default ${DELTA}
    -g <groupcnt>: number of overlap groups, default ${GROUPCNT}
    -t <trackno>: number of input tracks, default ${TRACKNO}
    -h, -?: Print this help and exit
HERE
}

# == MAIN ==

if [[ $# -lt 1 ]]; then
	print_usage
	exit 99
fi

while getopts r:c:d:g:t:h OPTION
do
    case $OPTION in
        r) REPEAT=$OPTARG ;;
        c) CHROM=$OPTARG ;;
        d) DELTA=$OPTARG ;;
        g) GROUPCNT=$OPTARG ;;
        t) TRACKNO=$OPTARG ;;
        h|\?) print_usage; exit 99 ;;
    esac
done
shift `expr $OPTIND - 1`
if [[ $# -lt 1 ]]; then
	echo "You must specify the path to the program to be run."
	exit 1
fi
if [[ ! -x $1 ]]; then
	echo "Program $1 not found or is not executable."
	exit 2
fi

# setup
TIMER_FILE=${DATA}/timer_output.txt
OUTPUT_FILE=${DATA}/program_output.txt
echo "Creating exercise directory ${DATA}"
mkdir -p ${DATA}
rm -f ${TIMER_FILE}
INPUTCMD="${TEST}/inputfiles -c ${CHROM} -d ${DELTA} -D ${DATA} -t ${TRACKNO} -g ${GROUPCNT}"

# time output format for Linux only (GNU extension)
if [[ $(uname -s) = "Linux" ]]; then
    # this mimics the format under MacOS
    TIMER_FMT="-f \"\t%E real\t%U user\t%S sys\t%P CPU\""
else
    TIMER_FMT=""
fi
for iter in $(seq $REPEAT); do
    echo "Run ${iter}"
    # clean slate
    rm -f ${DATA}/track_*.bed
    rm -f ${OUTPUT_FILE}
    # make new input
    ${INPUTCMD}
    # command to execute and redirect its outputs
    # do the timing
	/usr/bin/time  ${TIMER_FMT} -a -o ${TIMER_FILE} $@ ${DATA}/track_*.bed >& ${OUTPUT_FILE}
    if [ $? != 0 ]; then
        echo "Program failure, check ${OUTPUT_FILE}"
        break
    fi
done
