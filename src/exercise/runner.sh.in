#!/bin/bash

# Runs a given MULTOVL variant with big input files
# Can be used for timing or to detect 'random' crashes in multithreaded versions
# 2012-04-16 AA

# -- Directories --

PGMS=@PROJECT_BINARY_DIR@/bin
TESTDIR=${PGMS}/exercise
DATADIR=${TESTDIR}/data
OUTPUT_FILE=${DATADIR}/program_output.txt

# -- Fixed settings for input files --

CHROM=20
DELTA=10
GROUPCNT=1000
TRACKNO=8

# -- Can profiling be done? --

PROF=@PROFILER@
if [[ "$PROF" =~ "-NOTFOUND" ]]; then
    unset PROF
    OPTSTR="r:h"
else
    OPTSTR="r:ph"
fi

# -- Default values for script parameters --

DO_PROFILE=1  # false
REPEAT=0

# -- Functions --

print_usage()
{
    echo "Usage: `basename $0` [-p | -r <repeat> ] program [program-options]"
    echo "Script options:"
    if [[ $PROF ]]; then
        echo "  -p: Profile <program> with ${PROF}, overrides '-r'"
    fi
    echo "  -r <repeat>: Run and time <program> this many times, default 0 (don't run)"
    echo "  -h, -?: Print this help and exit"
}

# == MAIN ==

if [[ $# -lt 1 ]]; then
	print_usage
	exit 99
fi

while getopts $OPTSTR OPTION; do
    case $OPTION in
        r) REPEAT=$OPTARG ;;
        p) REPEAT=0; DO_PROFILE=0 ;; # DO_PROFILE is "true"
        h|\?) print_usage; exit 99 ;;
    esac
done
if [[ $DO_PROFILE != 0 && $REPEAT == 0 ]]; then
    echo "No -p, no -r set, exiting"
    exit 99
fi

shift `expr $OPTIND - 1`
if [[ $# -lt 1 ]]; then
	echo "You must specify the path to the program to be run."
	exit 1
fi
if [[ ! -x $1 ]]; then
	echo "Program $1 not found or is not executable."
	exit 2
fi

# setup
echo "Creating exercise directory ${DATADIR}"
mkdir -p ${DATADIR}
INPUTCMD="${TESTDIR}/inputfiles -c ${CHROM} -d ${DELTA} -D ${DATADIR} -t ${TRACKNO} -g ${GROUPCNT}"

if [[ $DO_PROFILE == 0 ]]; then
    echo "Start profiling"
    ${INPUTCMD}
    # profiling, specifically for 'perf'
    $PROF record --call-graph dwarf -o ${DATADIR}/perf.data $@ ${DATADIR}/track_*.bed > ${OUTPUT_FILE}
    echo "Profiling data collection done. Run the appropriate analysis tool"
    exit
fi

# No profiling requested, do the timing instead
TIMER_FILE=${DATADIR}/timer_output.txt
rm -f ${TIMER_FILE}

# time output format for Linux only (GNU extension)
if [[ $(uname -s) = "Linux" ]]; then
    # this mimics the format under MacOS
    # TIME env var is set because I could not get the "-f \"..\"" quotation marks right
    export TIME="\t%E real\t%U user\t%S sys\t%P CPU"
fi
echo "Start timing"
for iter in $(seq $REPEAT); do
    echo "Run ${iter}"
    # clean slate
    rm -f ${DATADIR}/track_*.bed
    rm -f ${OUTPUT_FILE}
    # make new input
    ${INPUTCMD}
    # command to execute and redirect its outputs
    # do the timing
	/usr/bin/time -a -o ${TIMER_FILE} $@ ${DATADIR}/track_*.bed >& ${OUTPUT_FILE}
    if [ $? != 0 ]; then
        echo "Program failure, check ${OUTPUT_FILE}"
        break
    fi
done
